#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Feb 16, 2020 03:36:05 PM IST  platform: Windows NT


import sys
from datetime import date
from time import strftime
from tkinter import messagebox

import first_window_support
import search_window
import search_window_support
import member_window
import member_window_support
import displayall_book_window
import displayall_book_window_support
import add_book_window
import add_book_window_support


import cx_Oracle

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import add_book_window_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Add_Book_Window (root)
    add_book_window_support.init(root, top)
    root.mainloop()

w = None
def create_Add_Book_Window(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Add_Book_Window (w)
    add_book_window_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Add_Book_Window():
    global w
    w.destroy()
    w = None




class Add_Book_Window:
    def add_book(self):
        self.add_book1(self.Book_Code_Entry.get(),self.Book_Title_Entry.get(),self.Category_Entry.get(),self.Author_Entry.get(), self.Publication_Entry.get(), self.Publish_Date_Entry.get(), self.Book_Edition_Entry.get(),self.Price_Entry.get(), self.Rack_Num_Entry.get(), self.Supplier_ID_Entry.get())
    def add_book1(self,book_code,book_title,category,author,publication,publish_date,book_edition,price,rack_no,supplier_id):

        try:
            self.conn = cx_Oracle.connect('HR/root')
            self.cursor = self.conn.cursor()
            try:
                self.cursor.execute("declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_MEMBERS'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_MEMBERS(MEMBER_ID Varchar2(10), MEMBER_NAME Varchar2(30) NOT NULL, CITY Varchar2(20), DATE_REGISTER date NOT NULL, DATE_EXPIRE date , MEMBERSHIP_STATUS Varchar2(15) NOT NULL, Constraint LMS_cts1 PRIMARY KEY(MEMBER_ID))'); END IF; end;")
            except Exception as e:
                messagebox.showerror("member table", e)
            try:
                self.cursor.execute("declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_SUPPLIERS_DETAILS'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_SUPPLIERS_DETAILS(SUPPLIER_ID Varchar2(3),  SUPPLIER_NAME Varchar2(30) NOT NULL, ADDRESS Varchar2(50),	CONTACT number(10) NOT NULL, EMAIL Varchar2(15) NOT NULL, Constraint LMS_cts2 PRIMARY KEY(SUPPLIER_ID))'); END IF; end;")
            except Exception as e:
                messagebox.showerror("supplier table", e)
            try:
                self.cursor.execute("declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_FINE_DETAILS'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_FINE_DETAILS(FINE_RANGE Varchar2(3), FINE_AMOUNT number(10,2) NOT NULL, Constraint LMS_cts3 PRIMARY KEY(FINE_RANGE))'); END IF; end;")
            except Exception as e:
                messagebox.showerror("finedetails table", e)
            try:
                self.cursor.execute("declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_BOOK_DETAILS'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_BOOK_DETAILS(BOOK_CODE Varchar2(10), BOOK_TITLE Varchar2(50) NOT NULL, CATEGORY Varchar2(15) NOT NULL, AUTHOR Varchar2(30) NOT NULL, PUBLICATION Varchar2(30), PUBLISH_DATE date, BOOK_EDITION int, PRICE number(8,2) NOT NULL, RACK_NUM Varchar2(3), DATE_ARRIVAL date NOT NULL, SUPPLIER_ID Varchar2(3) NOT NULL, Constraint LMS_cts4 PRIMARY KEY(BOOK_CODE), Constraint LMS_cts41 FOREIGN KEY(SUPPLIER_ID) References LMS_SUPPLIERS_DETAILS(SUPPLIER_ID))'); END IF; end;")
            except Exception as e:
                messagebox.showerror("bookdetails table", e)
            try:
                self.cursor.execute("declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_BOOK_ISSUE'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_BOOK_ISSUE(BOOK_ISSUE_NO int,MEMBER_ID Varchar2(10) NOT NULL, BOOK_CODE Varchar2(10) NOT NULL, DATE_ISSUE date NOT NULL, DATE_RETURN date NOT NULL, DATE_RETURNED date NULL,BOOK_ISSUE_STATUS varchar2(20), FINE_RANGE Varchar2(3), Constraint LMS_cts5 PRIMARY KEY(BOOK_ISSUE_NO), Constraint LMS_Mem FOREIGN KEY(MEMBER_ID) References LMS_MEMBERS(MEMBER_ID), Constraint LMS_BookDetail FOREIGN KEY(BOOK_CODE) References LMS_BOOK_DETAILS(BOOK_CODE), Constraint LMS_FineDetail FOREIGN KEY(FINE_RANGE) References LMS_FINE_DETAILS(FINE_RANGE))'); END IF; end;")
            except Exception as e:
                messagebox.showerror("book issue table", e)
            self.conn.commit()

        except cx_Oracle.DatabaseError as e:
            messagebox.showerror("Error! in connection", e)

        try:
            # if member_id == '' or member_name=='' or city=='' or date_of_register=='' or date_of_expire=='' or membership_status == '' or book_edition=='' or price=='' or rack_no=='' or supplier_id=='':
            #     messagebox.showerror("Error!","Please Enter All The Fields")
            self.cursor.execute("INSERT INTO LMS_BOOK_DETAILS VALUES(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10)",(book_code,book_title,category,author,publication,publish_date,book_edition,price,rack_no,supplier_id))
            self.conn.commit()
        except Exception as e:
             messagebox.showerror("Error in insertion!", e)

    def update_book(self):
        self.update_book1(self.Book_Code_Entry.get(), self.Book_Title_Entry.get(), self.Category_Entry.get(),
                       self.Author_Entry.get(), self.Publication_Entry.get(), self.Publish_Date_Entry.get(),
                       self.Book_Edition_Entry.get(), self.Price_Entry.get(), self.Rack_Num_Entry.get(),
                       self.Supplier_ID_Entry.get())
    def update_book1(self,book_code,book_title,category,author,publication,publish_date,book_edition,price,rack_no,supplier_id):
        try:
            self.conn = cx_Oracle.connect('HR/root')
            self.cursor = self.conn.cursor()
            try:
                self.cursor.execute(
                    "declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_MEMBERS'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_MEMBERS(MEMBER_ID Varchar2(10), MEMBER_NAME Varchar2(30) NOT NULL, CITY Varchar2(20), DATE_REGISTER date NOT NULL, DATE_EXPIRE date , MEMBERSHIP_STATUS Varchar2(15) NOT NULL, Constraint LMS_cts1 PRIMARY KEY(MEMBER_ID))'); END IF; end;")
            except Exception as e:
                messagebox.showerror("member table", e)
            try:
                self.cursor.execute(
                    "declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_SUPPLIERS_DETAILS'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_SUPPLIERS_DETAILS(SUPPLIER_ID Varchar2(3),  SUPPLIER_NAME Varchar2(30) NOT NULL, ADDRESS Varchar2(50),	CONTACT number(10) NOT NULL, EMAIL Varchar2(15) NOT NULL, Constraint LMS_cts2 PRIMARY KEY(SUPPLIER_ID))'); END IF; end;")
            except Exception as e:
                messagebox.showerror("supplier table", e)
            try:
                self.cursor.execute(
                    "declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_FINE_DETAILS'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_FINE_DETAILS(FINE_RANGE Varchar2(3), FINE_AMOUNT number(10,2) NOT NULL, Constraint LMS_cts3 PRIMARY KEY(FINE_RANGE))'); END IF; end;")
            except Exception as e:
                messagebox.showerror("finedetails table", e)
            try:
                self.cursor.execute(
                    "declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_BOOK_DETAILS'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_BOOK_DETAILS(BOOK_CODE Varchar2(10), BOOK_TITLE Varchar2(50) NOT NULL, CATEGORY Varchar2(15) NOT NULL, AUTHOR Varchar2(30) NOT NULL, PUBLICATION Varchar2(30), PUBLISH_DATE date, BOOK_EDITION int, PRICE number(8,2) NOT NULL, RACK_NUM Varchar2(3), DATE_ARRIVAL date NOT NULL, SUPPLIER_ID Varchar2(3) NOT NULL, Constraint LMS_cts4 PRIMARY KEY(BOOK_CODE), Constraint LMS_cts41 FOREIGN KEY(SUPPLIER_ID) References LMS_SUPPLIERS_DETAILS(SUPPLIER_ID))'); END IF; end;")
            except Exception as e:
                messagebox.showerror("bookdetails table", e)
            try:
                self.cursor.execute(
                    "declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_BOOK_ISSUE'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_BOOK_ISSUE(BOOK_ISSUE_NO int,MEMBER_ID Varchar2(10) NOT NULL, BOOK_CODE Varchar2(10) NOT NULL, DATE_ISSUE date NOT NULL, DATE_RETURN date NOT NULL, DATE_RETURNED date NULL,BOOK_ISSUE_STATUS varchar2(20), FINE_RANGE Varchar2(3), Constraint LMS_cts5 PRIMARY KEY(BOOK_ISSUE_NO), Constraint LMS_Mem FOREIGN KEY(MEMBER_ID) References LMS_MEMBERS(MEMBER_ID), Constraint LMS_BookDetail FOREIGN KEY(BOOK_CODE) References LMS_BOOK_DETAILS(BOOK_CODE), Constraint LMS_FineDetail FOREIGN KEY(FINE_RANGE) References LMS_FINE_DETAILS(FINE_RANGE))'); END IF; end;")
            except Exception as e:
                messagebox.showerror("book issue table", e)
            self.conn.commit()

        except cx_Oracle.DatabaseError as e:
            messagebox.showerror("Error! in connection", e)

        try:
            # if member_id == '' or member_name=='' or city=='' or date_of_register=='' or date_of_expire=='' or membership_status == '' or book_edition=='' or price=='' or rack_no=='' or supplier_id=='':
            #     messagebox.showerror("Error!","Please Enter All The Fields")
            # self.cursor.execute("UPDATE INTO LMS_BOOK_DETAILS VALUES(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10)", (
            # book_code, book_title, category, author, publication, publish_date, book_edition, price, rack_no,
            # supplier_id))

            if book_title != '':
                self.cursor.execute(("UPDATE LMS_BOOK_DETAILS SET BOOK_TITLE = :1 WHERE BOOK_CODE = :2"),(book_title,book_code))
                self.conn.commit()
            if category !='':
                self.cursor.execute(("UPDATE LMS_BOOK_DETAILS SET CATEGORY = :1 WHERE BOOK_CODE = :2"),
                                    (category, book_code))
                self.conn.commit()
            if author !='':
                self.cursor.execute(("UPDATE LMS_BOOK_DETAILS SET AUTHOR = :1 WHERE BOOK_CODE = :2"),
                                    (author, book_code))
                self.conn.commit()
            if publication !='':
                self.cursor.execute(("UPDATE LMS_BOOK_DETAILS SET PUBLICATION = :1 WHERE BOOK_CODE = :2"),
                                    (publication, book_code))
                self.conn.commit()
            if publish_date !='':
                self.cursor.execute(("UPDATE LMS_BOOK_DETAILS SET PUBLISH_DATE = :1 WHERE BOOK_CODE = :2"),
                                    (publish_date, book_code))
                self.conn.commit()
            if book_edition !='':
                self.cursor.execute(("UPDATE LMS_BOOK_DETAILS SET BOOK_EDITION = :1 WHERE BOOK_CODE = :2"),
                                    (book_edition, book_code))
                self.conn.commit()
            if rack_no !="":
                self.cursor.execute(("UPDATE LMS_BOOK_DETAILS SET RACK_NUM = :1 WHERE BOOK_CODE = :2"),
                                    (rack_no, book_code))
                self.conn.commit()
            if supplier_id !='':
                self.cursor.execute(("UPDATE LMS_BOOK_DETAILS SET SUPPLIER_ID = :1 WHERE BOOK_CODE = :2"),
                                    (supplier_id, book_code))
                self.conn.commit()

        except Exception as e:
            messagebox.showerror("Error in updation!", e)


    def __init__(self, Add_Book_Window=None):

        try:
            self.conn = cx_Oracle.connect('HR/root')
            self.cursor = self.conn.cursor()
            try:
                self.cursor.execute("declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_MEMBERS'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_MEMBERS(MEMBER_ID Varchar2(10), MEMBER_NAME Varchar2(30) NOT NULL, CITY Varchar2(20), DATE_REGISTER date NOT NULL, DATE_EXPIRE date , MEMBERSHIP_STATUS Varchar2(15) NOT NULL, Constraint LMS_cts1 PRIMARY KEY(MEMBER_ID))'); END IF; end;")
            except Exception as e:
                messagebox.showerror("member table", e)
            try:
                self.cursor.execute("declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_SUPPLIERS_DETAILS'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_SUPPLIERS_DETAILS(SUPPLIER_ID Varchar2(3),  SUPPLIER_NAME Varchar2(30) NOT NULL, ADDRESS Varchar2(50),	CONTACT number(10) NOT NULL, EMAIL Varchar2(15) NOT NULL, Constraint LMS_cts2 PRIMARY KEY(SUPPLIER_ID))'); END IF; end;")
            except Exception as e:
                messagebox.showerror("supplier table", e)
            try:
                self.cursor.execute("declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_FINE_DETAILS'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_FINE_DETAILS(FINE_RANGE Varchar2(3), FINE_AMOUNT number(10,2) NOT NULL, Constraint LMS_cts3 PRIMARY KEY(FINE_RANGE))'); END IF; end;")
            except Exception as e:
                messagebox.showerror("finedetails table", e)
            try:
                self.cursor.execute("declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_BOOK_DETAILS'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_BOOK_DETAILS(BOOK_CODE Varchar2(10), BOOK_TITLE Varchar2(50) NOT NULL, CATEGORY Varchar2(15) NOT NULL, AUTHOR Varchar2(30) NOT NULL, PUBLICATION Varchar2(30), PUBLISH_DATE date, BOOK_EDITION int, PRICE number(8,2) NOT NULL, RACK_NUM Varchar2(3), DATE_ARRIVAL date NOT NULL, SUPPLIER_ID Varchar2(3) NOT NULL, Constraint LMS_cts4 PRIMARY KEY(BOOK_CODE), Constraint LMS_cts41 FOREIGN KEY(SUPPLIER_ID) References LMS_SUPPLIERS_DETAILS(SUPPLIER_ID))'); END IF; end;")
            except Exception as e:
                messagebox.showerror("bookdetails table", e)
            try:
                self.cursor.execute("declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_BOOK_ISSUE'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_BOOK_ISSUE(BOOK_ISSUE_NO int,MEMBER_ID Varchar2(10) NOT NULL, BOOK_CODE Varchar2(10) NOT NULL, DATE_ISSUE date NOT NULL, DATE_RETURN date NOT NULL, DATE_RETURNED date NULL,BOOK_ISSUE_STATUS varchar2(20), FINE_RANGE Varchar2(3), Constraint LMS_cts5 PRIMARY KEY(BOOK_ISSUE_NO), Constraint LMS_Mem FOREIGN KEY(MEMBER_ID) References LMS_MEMBERS(MEMBER_ID), Constraint LMS_BookDetail FOREIGN KEY(BOOK_CODE) References LMS_BOOK_DETAILS(BOOK_CODE), Constraint LMS_FineDetail FOREIGN KEY(FINE_RANGE) References LMS_FINE_DETAILS(FINE_RANGE))'); END IF; end;")
            except Exception as e:
                messagebox.showerror("book issue table", e)
            self.conn.commit()

        except cx_Oracle.DatabaseError as e:
            messagebox.showerror("Error! in connection", e)

        def tick(time1=''):
            time2=strftime("%H:%M:%S")
            if time2!=time1:
                time1=time2
                self.Timenow_Label.configure(text = time2)
            self.Timenow_Label.after(500, tick)

        '''This class configures and populates the toplevel window.
           Displayall_Member_window is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font11 = "-family {Times New Roman} -size 20 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        font12 = "-family {Times New Roman} -size 13 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"

        Add_Book_Window.geometry("1232x741+310+64")
        Add_Book_Window.minsize(148, 1)
        Add_Book_Window.maxsize(4112, 1030)
        Add_Book_Window.resizable(0, 0)
        Add_Book_Window.title("ADD BOOK WINDOW")
        Add_Book_Window.configure(background="#b42cc7")


        self.Add_Book_Window_Frame = tk.Frame(Add_Book_Window)
        self.Add_Book_Window_Frame.place(relx=0.049, rely=0.063, relheight=0.884
                , relwidth=0.916)
        self.Add_Book_Window_Frame.configure(relief='groove')
        self.Add_Book_Window_Frame.configure(borderwidth="2")
        self.Add_Book_Window_Frame.configure(relief="groove")
        self.Add_Book_Window_Frame.configure(background="#5f86d8")

        self.Private_Label = tk.Label(self.Add_Book_Window_Frame)
        self.Private_Label.place(relx=0.115, rely=0.061, height=126, width=912)
        self.Private_Label.configure(background="#d9d9d9")
        self.Private_Label.configure(disabledforeground="#a3a3a3")
        self.Private_Label.configure(font=font11)
        self.Private_Label.configure(foreground="#000000")
        self.Private_Label.configure(text='''Private Library''')

        self.Date_Label = tk.Label(self.Add_Book_Window_Frame)
        self.Date_Label.place(relx=0.115, rely=0.244, height=56, width=262)
        self.Date_Label.configure(background="#d9d9d9")
        self.Date_Label.configure(disabledforeground="#a3a3a3")
        self.Date_Label.configure(font=font12)
        self.Date_Label.configure(foreground="#000000")
        self.Date_Label.configure(text='''Date:''')

        self.Datenow_Label = tk.Label(self.Add_Book_Window_Frame)
        self.Datenow_Label.place(relx=0.345, rely=0.244, height=56, width=212)
        self.Datenow_Label.configure(background="#d9d9d9")
        self.Datenow_Label.configure(disabledforeground="#a3a3a3")
        self.Datenow_Label.configure(font=font12)
        self.Datenow_Label.configure(foreground="#000000")
        self.Datenow_Label.configure(text=date.today())

        self.Time_LAbel = tk.Label(self.Add_Book_Window_Frame)
        self.Time_LAbel.place(relx=0.531, rely=0.244, height=56, width=213)
        self.Time_LAbel.configure(background="#d9d9d9")
        self.Time_LAbel.configure(disabledforeground="#a3a3a3")
        self.Time_LAbel.configure(font=font12)
        self.Time_LAbel.configure(foreground="#000000")
        self.Time_LAbel.configure(text='''Time:''')

        self.Timenow_Label = tk.Label(self.Add_Book_Window_Frame)
        self.Timenow_Label.place(relx=0.717, rely=0.229, height=66, width=234)
        self.Timenow_Label.configure(background="#d9d9d9")
        self.Timenow_Label.configure(disabledforeground="#a3a3a3")
        self.Timenow_Label.configure(font=font12)
        self.Timenow_Label.configure(foreground="#000000")
        tick(self)

        self.Book_Code_Label = tk.Label(self.Add_Book_Window_Frame)
        self.Book_Code_Label.place(relx=0.124, rely=0.382, height=36, width=152)
        self.Book_Code_Label.configure(background="#d9d9d9")
        self.Book_Code_Label.configure(disabledforeground="#a3a3a3")
        self.Book_Code_Label.configure(font=font12)
        self.Book_Code_Label.configure(foreground="#000000")
        self.Book_Code_Label.configure(text='''Book Code:''')

        self.Book_Title_Label = tk.Label(self.Add_Book_Window_Frame)
        self.Book_Title_Label.place(relx=0.124, rely=0.458, height=36, width=152)

        self.Book_Title_Label.configure(background="#d9d9d9")
        self.Book_Title_Label.configure(disabledforeground="#a3a3a3")
        self.Book_Title_Label.configure(font=font12)
        self.Book_Title_Label.configure(foreground="#000000")
        self.Book_Title_Label.configure(text='''Book Title:''')

        self.Book_Code_Entry = tk.Entry(self.Add_Book_Window_Frame)
        self.Book_Code_Entry.place(relx=0.266, rely=0.382, height=34
                , relwidth=0.181)
        self.Book_Code_Entry.configure(background="white")
        self.Book_Code_Entry.configure(disabledforeground="#a3a3a3")
        self.Book_Code_Entry.configure(font=font12)
        self.Book_Code_Entry.configure(foreground="#000000")
        self.Book_Code_Entry.configure(insertbackground="black")

        self.Book_Title_Entry = tk.Entry(self.Add_Book_Window_Frame)
        self.Book_Title_Entry.place(relx=0.266, rely=0.458, height=34
                                    , relwidth=0.181)
        self.Book_Title_Entry.configure(background="white")
        self.Book_Title_Entry.configure(disabledforeground="#a3a3a3")
        self.Book_Title_Entry.configure(font=font12)
        self.Book_Title_Entry.configure(foreground="#000000")
        self.Book_Title_Entry.configure(insertbackground="black")

        self.Category_Label = tk.Label(self.Add_Book_Window_Frame)
        self.Category_Label.place(relx=0.124, rely=0.534, height=36, width=152)
        self.Category_Label.configure(background="#d9d9d9")
        self.Category_Label.configure(disabledforeground="#a3a3a3")
        self.Category_Label.configure(font=font12)
        self.Category_Label.configure(foreground="#000000")
        self.Category_Label.configure(text='''Category:''')

        self.Category_Entry = tk.Entry(self.Add_Book_Window_Frame)
        self.Category_Entry.place(relx=0.266, rely=0.534, height=34
                , relwidth=0.181)
        self.Category_Entry.configure(background="white")
        self.Category_Entry.configure(disabledforeground="#a3a3a3")
        self.Category_Entry.configure(font=font12)
        self.Category_Entry.configure(foreground="#000000")
        self.Category_Entry.configure(insertbackground="black")

        self.Author_Label = tk.Label(self.Add_Book_Window_Frame)
        self.Author_Label.place(relx=0.124, rely=0.611, height=36, width=152)
        self.Author_Label.configure(background="#d9d9d9")
        self.Author_Label.configure(disabledforeground="#a3a3a3")
        self.Author_Label.configure(font=font12)
        self.Author_Label.configure(foreground="#000000")
        self.Author_Label.configure(text='''Author:''')

        self.Author_Entry = tk.Entry(self.Add_Book_Window_Frame)
        self.Author_Entry.place(relx=0.266, rely=0.611, height=34
                , relwidth=0.181)
        self.Author_Entry.configure(background="white")
        self.Author_Entry.configure(disabledforeground="#a3a3a3")
        self.Author_Entry.configure(font=font12)
        self.Author_Entry.configure(foreground="#000000")
        self.Author_Entry.configure(insertbackground="black")

        self.Rack_Num_Label = tk.Label(self.Add_Book_Window_Frame)
        self.Rack_Num_Label.place(relx=0.124, rely=0.687, height=36, width=152)
        self.Rack_Num_Label.configure(background="#d9d9d9")
        self.Rack_Num_Label.configure(disabledforeground="#a3a3a3")
        self.Rack_Num_Label.configure(font=font12)
        self.Rack_Num_Label.configure(foreground="#000000")
        self.Rack_Num_Label.configure(text='''Rack Number:''')

        self.Rack_Num_Entry = tk.Entry(self.Add_Book_Window_Frame)
        self.Rack_Num_Entry.place(relx=0.266, rely=0.687, height=34
                , relwidth=0.181)
        self.Rack_Num_Entry.configure(background="white")
        self.Rack_Num_Entry.configure(disabledforeground="#a3a3a3")
        self.Rack_Num_Entry.configure(font=font12)
        self.Rack_Num_Entry.configure(foreground="#000000")
        self.Rack_Num_Entry.configure(insertbackground="black")

        self.Publication_Label = tk.Label(self.Add_Book_Window_Frame)
        self.Publication_Label.place(relx=0.496, rely=0.382, height=36
                , width=152)
        self.Publication_Label.configure(background="#d9d9d9")
        self.Publication_Label.configure(disabledforeground="#a3a3a3")
        self.Publication_Label.configure(font=font12)
        self.Publication_Label.configure(foreground="#000000")
        self.Publication_Label.configure(text='''Publication:''')

        self.Publication_Entry = tk.Entry(self.Add_Book_Window_Frame)
        self.Publication_Entry.place(relx=0.638, rely=0.382, height=34
                , relwidth=0.181)
        self.Publication_Entry.configure(background="white")
        self.Publication_Entry.configure(disabledforeground="#a3a3a3")
        self.Publication_Entry.configure(font=font12)
        self.Publication_Entry.configure(foreground="#000000")
        self.Publication_Entry.configure(insertbackground="black")

        self.Publish_Date_Label = tk.Label(self.Add_Book_Window_Frame)
        self.Publish_Date_Label.place(relx=0.496, rely=0.458, height=36
                , width=152)
        self.Publish_Date_Label.configure(background="#d9d9d9")
        self.Publish_Date_Label.configure(disabledforeground="#a3a3a3")
        self.Publish_Date_Label.configure(font=font12)
        self.Publish_Date_Label.configure(foreground="#000000")
        self.Publish_Date_Label.configure(text='''Publish Date:''')

        self.Publish_Date_Entry = tk.Entry(self.Add_Book_Window_Frame)
        self.Publish_Date_Entry.place(relx=0.638, rely=0.458, height=34
                                      , relwidth=0.181)
        self.Publish_Date_Entry.configure(background="white")
        self.Publish_Date_Entry.configure(disabledforeground="#a3a3a3")
        self.Publish_Date_Entry.configure(font=font12)
        self.Publish_Date_Entry.configure(foreground="#000000")
        self.Publish_Date_Entry.configure(insertbackground="black")

        self.Book_Edition_Label = tk.Label(self.Add_Book_Window_Frame)
        self.Book_Edition_Label.place(relx=0.496, rely=0.534, height=36
                , width=152)
        self.Book_Edition_Label.configure(background="#d9d9d9")
        self.Book_Edition_Label.configure(disabledforeground="#a3a3a3")
        self.Book_Edition_Label.configure(font=font12)
        self.Book_Edition_Label.configure(foreground="#000000")
        self.Book_Edition_Label.configure(text='''Book Edition:''')

        self.Price_Label = tk.Label(self.Add_Book_Window_Frame)
        self.Price_Label.place(relx=0.496, rely=0.611, height=36, width=152)
        self.Price_Label.configure(background="#d9d9d9")
        self.Price_Label.configure(disabledforeground="#a3a3a3")
        self.Price_Label.configure(font=font12)
        self.Price_Label.configure(foreground="#000000")
        self.Price_Label.configure(text='''Price''')

        self.Supplier_ID_Label = tk.Label(self.Add_Book_Window_Frame)
        self.Supplier_ID_Label.place(relx=0.496, rely=0.687, height=36
                , width=152)
        self.Supplier_ID_Label.configure(background="#d9d9d9")
        self.Supplier_ID_Label.configure(disabledforeground="#a3a3a3")
        self.Supplier_ID_Label.configure(font=font12)
        self.Supplier_ID_Label.configure(foreground="#000000")
        self.Supplier_ID_Label.configure(text='''Supplier ID:''')

        self.Book_Edition_Entry = tk.Entry(self.Add_Book_Window_Frame)
        self.Book_Edition_Entry.place(relx=0.638, rely=0.534, height=34
                , relwidth=0.181)
        self.Book_Edition_Entry.configure(background="white")
        self.Book_Edition_Entry.configure(disabledbackground="#f0f0f0f0f0f0")
        self.Book_Edition_Entry.configure(disabledforeground="#a3a3a3")
        self.Book_Edition_Entry.configure(font=font12)
        self.Book_Edition_Entry.configure(foreground="#000000")
        self.Book_Edition_Entry.configure(insertbackground="black")

        self.Price_Entry = tk.Entry(self.Add_Book_Window_Frame)
        self.Price_Entry.place(relx=0.638, rely=0.611, height=34, relwidth=0.181)

        self.Price_Entry.configure(background="white")
        self.Price_Entry.configure(disabledforeground="#a3a3a3")
        self.Price_Entry.configure(font=font12)
        self.Price_Entry.configure(foreground="#000000")
        self.Price_Entry.configure(insertbackground="black")

        self.Supplier_ID_Entry = tk.Entry(self.Add_Book_Window_Frame)
        self.Supplier_ID_Entry.place(relx=0.638, rely=0.687, height=34
                , relwidth=0.181)
        self.Supplier_ID_Entry.configure(background="white")
        self.Supplier_ID_Entry.configure(disabledbackground="#f0f0f0f0f0f0")
        self.Supplier_ID_Entry.configure(disabledforeground="#a3a3a3")
        self.Supplier_ID_Entry.configure(font=font12)
        self.Supplier_ID_Entry.configure(foreground="#000000")
        self.Supplier_ID_Entry.configure(insertbackground="black")

        self.Add_Button = tk.Button(self.Add_Book_Window_Frame)
        self.Add_Button.place(relx=0.316, rely=0.794, height=53, width=186)
        self.Add_Button.configure(activebackground="#ececec")
        self.Add_Button.configure(activeforeground="#000000")
        self.Add_Button.configure(background="#d9d9d9")
        self.Add_Button.configure(disabledforeground="#a3a3a3")
        self.Add_Button.configure(font=font12)
        self.Add_Button.configure(foreground="#000000")
        self.Add_Button.configure(highlightbackground="#d9d9d9")
        self.Add_Button.configure(highlightcolor="black")
        self.Add_Button.configure(pady="0")
        self.Add_Button.configure(command=self.add_book,text='''ADD''')

        self.Update_Button = tk.Button(self.Add_Book_Window_Frame)
        self.Update_Button.place(relx=0.516, rely=0.794, height=53, width=186)
        self.Update_Button.configure(activebackground="#ececec")
        self.Update_Button.configure(activeforeground="#000000")
        self.Update_Button.configure(background="#d9d9d9")
        self.Update_Button.configure(disabledforeground="#a3a3a3")
        self.Update_Button.configure(font=font12)
        self.Update_Button.configure(foreground="#000000")
        self.Update_Button.configure(highlightbackground="#d9d9d9")
        self.Update_Button.configure(highlightcolor="black")
        self.Update_Button.configure(pady="0")
        self.Update_Button.configure(command=self.update_book,text='''UPDATE''')

        self.menubar = tk.Menu(Add_Book_Window, font=font9, bg=_bgcolor, fg=_fgcolor)
        Add_Book_Window.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(Add_Book_Window, tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                foreground="#000000",
                label="File")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                foreground="#000000",
                label="Exit",
                command=add_book_window_support.destroy_window)

        self.conn.commit()
        self.conn.close()


if __name__ == '__main__':
    vp_start_gui()





