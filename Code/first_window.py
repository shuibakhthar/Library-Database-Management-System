#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Feb 15, 2020 10:02:23 PM IST  platform: Windows NT
import sys
from datetime import date
from time import strftime
from tkinter import messagebox

import first_window_support
import first_window
import search_window
import search_window_support
import member_window
import member_window_support


import displayall_book_window
import displayall_book_window_support
import displayall_member_window
import displayall_member_window_support
import displayall_supplier_window
import displayall_supplier_window_support
import displayall_fine_window
import displayall_supplier_window_support
import displayall_borrowedbook_window
import displayall_borrowedbook_window_support
import add_book_window
import add_book_window_support
import add_member_window
import add_member_window_support
import add_supplier_window
import add_supplier_window_support
import add_fine_window
import add_fine_window_support
import add_bookissue_window
import add_bookissue_window_support
import delete_book_window
import delete_book_window_support
import delete_fine_window
import delete_fine_window_support
import delete_member_window
import delete_member_window_support
import delete_supplier_window
import delete_supplier_window_support
import delete_bookissue_window
import delete_bookissue_window_support

import numpy as np
import cx_Oracle




try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    first_window_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    first_window_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:

    def add_book(self):
        try:
            add_book_window.create_Add_Book_Window(root)
        except:
            add_book_window.create_Add_Book_Window(rt)
    def add_fine(self):
        try:
            add_fine_window.create_Toplevel1(root)
        except:
            add_fine_window.create_Toplevel1(rt)
    def add_supplier(self):
        try:
            add_supplier_window.create_Toplevel1(root)
        except:
            add_supplier_window.create_Toplevel1(rt)
    def add_member(self):
        try:
            add_member_window.create_Toplevel1(root)
        except:
            add_member_window.create_Toplevel1(rt)
    def add_borrower(self):
        try:
            add_bookissue_window.create_Toplevel1(root)
        except:
            add_bookissue_window.create_Toplevel1(rt)

    def delete_book(self):
        try:
            delete_book_window.create_Toplevel1(root)
        except:
            delete_book_window.create_Toplevel1(rt)
    def delete_fine(self):
        try:
            delete_fine_window.create_Toplevel1(root)
        except:
            delete_fine_window.create_Toplevel1(rt)
    def delete_supplier(self):
        try:
            delete_supplier_window.create_Toplevel1(root)
        except:
            delete_supplier_window.create_Toplevel1(rt)
    def delete_member(self):
        try:
            delete_member_window.create_Toplevel1(root)
        except:
            delete_member_window.create_Toplevel1(rt)
    def delete_borrower(self):
        try:
            delete_bookissue_window.create_Toplevel1(root)
        except:
            delete_bookissue_window.create_Toplevel1(rt)

    def display_book(self):
        try:
            displayall_book_window.create_displayall_window(root)
        except:
            displayall_book_window.create_displayall_window(rt)
    def display_borrower(self):
        try:
            displayall_borrowedbook_window.create_Toplevel1(root)
        except:
            displayall_borrowedbook_window.create_Toplevel1(rt)
    def display_supplier(self):
        try:
            displayall_supplier_window.create_Toplevel1(root)
        except:
            displayall_supplier_window.create_Toplevel1(rt)
    def display_fine(self):
        try:
            displayall_fine_window.create_Toplevel1(root)
        except:
            displayall_fine_window.create_Toplevel1(rt)
    def display_member(self):
        try:
            displayall_member_window.create_Displayall_Member_Window(root)
        except:
            displayall_member_window.create_Displayall_Member_Window(rt)

    def search(self):
        try:
            search_window.create_search_window(root)
        except:
            search_window.create_search_window(rt)

    def member(self):
        try:
            member_window.create_member(root)
        except:
            member_window.create_member(rt)

    def display_all(self):
        try:
            displayall_book_window.create_displayall_window(root)
        except:
            displayall_book_window.create_displayall_window(rt)

    def show_fine(self):
        try:
            displayall_fine_window.create_Toplevel1(root)
        except:
            displayall_fine_window.create_Toplevel1(rt)

    def show_supplier(self):
        try:
            displayall_supplier_window.create_Toplevel1(root)
        except:
            displayall_supplier_window.create_Toplevel1(rt)

    def show_Borrower(self):
        try:
            displayall_borrowedbook_window.create_Toplevel1(root)
        except:
            displayall_borrowedbook_window.create_Toplevel1(rt)

    def __init__(self, First_Window=None):

        try:
            self.conn = cx_Oracle.connect('HR/root')
            self.cursor = self.conn.cursor()
            try:
                self.cursor.execute("declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_MEMBERS'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_MEMBERS(MEMBER_ID Varchar2(10), MEMBER_NAME Varchar2(30) NOT NULL, CITY Varchar2(20), DATE_REGISTER date NOT NULL, DATE_EXPIRE date , MEMBERSHIP_STATUS Varchar2(15) NOT NULL, Constraint LMS_cts1 PRIMARY KEY(MEMBER_ID))'); END IF; end;")
            except Exception as e:
                messagebox.showerror("member table", e)
            try:
                self.cursor.execute("declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_SUPPLIERS_DETAILS'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_SUPPLIERS_DETAILS(SUPPLIER_ID Varchar2(3),  SUPPLIER_NAME Varchar2(30) NOT NULL, ADDRESS Varchar2(50),	CONTACT number(10) NOT NULL, EMAIL Varchar2(40) NOT NULL, Constraint LMS_cts2 PRIMARY KEY(SUPPLIER_ID))'); END IF; end;")
            except Exception as e:
                messagebox.showerror("supplier table", e)
            try:
                self.cursor.execute("declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_FINE_DETAILS'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_FINE_DETAILS(FINE_RANGE Varchar2(3), FINE_AMOUNT number(10,2) NOT NULL, Constraint LMS_cts3 PRIMARY KEY(FINE_RANGE))'); END IF; end;")
            except Exception as e:
                messagebox.showerror("finedetails table", e)
            try:
                self.cursor.execute("declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_BOOK_DETAILS'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_BOOK_DETAILS(BOOK_CODE Varchar2(10), BOOK_TITLE Varchar2(50) NOT NULL, CATEGORY Varchar2(15) NOT NULL, AUTHOR Varchar2(30) NOT NULL, PUBLICATION Varchar2(30), PUBLISH_DATE date, BOOK_EDITION int, PRICE number(8,2) NOT NULL, RACK_NUM Varchar2(3), SUPPLIER_ID Varchar2(3) NOT NULL, Constraint LMS_cts4 PRIMARY KEY(BOOK_CODE), Constraint LMS_cts41 FOREIGN KEY(SUPPLIER_ID) References LMS_SUPPLIERS_DETAILS(SUPPLIER_ID) on delete cascade)'); END IF; end;")
            except Exception as e:
                messagebox.showerror("bookdetails table", e)
            try:
                self.cursor.execute("declare nCount NUMBER; begin SELECT count(*) into nCount FROM user_tables where table_name = 'LMS_BOOK_ISSUE'; IF(nCount <= 0) THEN execute immediate ('Create table LMS_BOOK_ISSUE(BOOK_ISSUE_NO int,MEMBER_ID Varchar2(10) NOT NULL, BOOK_CODE Varchar2(10) NOT NULL, DATE_ISSUE date NOT NULL, DATE_RETURN date NOT NULL, DATE_RETURNED date NULL,BOOK_ISSUE_STATUS varchar2(20), FINE_RANGE Varchar2(3), Constraint LMS_cts5 PRIMARY KEY(BOOK_ISSUE_NO), Constraint LMS_Mem FOREIGN KEY(MEMBER_ID) References LMS_MEMBERS(MEMBER_ID) on DELETE CASCADE, Constraint LMS_BookDetail FOREIGN KEY(BOOK_CODE) References LMS_BOOK_DETAILS(BOOK_CODE) on DELETE CASCADE, Constraint LMS_FineDetail FOREIGN KEY(FINE_RANGE) References LMS_FINE_DETAILS(FINE_RANGE) on DELETE CASCADE)'); END IF; end;")
            except Exception as e:
                messagebox.showerror("book issue table", e)
            self.conn.commit()

        except cx_Oracle.DatabaseError as e:
            messagebox.showerror("Error!, while connections", e)


        def tick(time1=''):
            time2 = strftime("%H:%M:%S")
            if time2 != time1:
                time1 = time2
                self.Timenow_Label.configure(text=time2)
            self.Timenow_Label.after(400, tick)

        '''This class configures and populates the toplevel window.
           Search_Window is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font11 = "-family {Times New Roman} -size 13 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"

        First_Window.geometry("1232x766+0+0")
        First_Window.minsize(148, 1)
        First_Window.maxsize(4112, 1055)
        First_Window.resizable(0, 0)
        First_Window.title("Library Management System")
        First_Window.configure(background="#b42cc7")
        First_Window.configure(highlightbackground="#d9d9d9")
        First_Window.configure(highlightcolor="#646464646464")

        self.First_Window_Frame = tk.Frame(First_Window)
        self.First_Window_Frame.place(relx=0.049, rely=0.063, relheight=0.884
                                      , relwidth=0.916)
        self.First_Window_Frame.configure(relief='sunken')
        self.First_Window_Frame.configure(borderwidth="2")
        self.First_Window_Frame.configure(relief="sunken")
        self.First_Window_Frame.configure(background="#5f86d8")
        self.First_Window_Frame.configure(highlightbackground="#d9d9d9")
        self.First_Window_Frame.configure(highlightcolor="black")

        self.Private_Label = tk.Label(self.First_Window_Frame)
        self.Private_Label.place(relx=0.115, rely=0.058, height=126, width=912)
        self.Private_Label.configure(activebackground="#f9f9f9")
        self.Private_Label.configure(activeforeground="black")
        self.Private_Label.configure(background="#d9d9d9")
        self.Private_Label.configure(disabledforeground="#a3a3a3")
        self.Private_Label.configure(font="-family {Times New Roman} -size 20")
        self.Private_Label.configure(foreground="#000000")
        self.Private_Label.configure(highlightbackground="#d9d9d9")
        self.Private_Label.configure(highlightcolor="black")
        self.Private_Label.configure(text='''Private Library''')

        self.Date_Label = tk.Label(self.First_Window_Frame)
        self.Date_Label.place(relx=0.115, rely=0.229, height=56, width=262)
        self.Date_Label.configure(activebackground="#f9f9f9")
        self.Date_Label.configure(activeforeground="black")
        self.Date_Label.configure(background="#d9d9d9")
        self.Date_Label.configure(disabledforeground="#a3a3a3")
        self.Date_Label.configure(font="-family {Times New Roman} -size 13")
        self.Date_Label.configure(foreground="#000000")
        self.Date_Label.configure(highlightbackground="#d9d9d9")
        self.Date_Label.configure(highlightcolor="black")
        self.Date_Label.configure(text='''Date:''')

        self.Time_Label = tk.Label(self.First_Window_Frame)
        self.Time_Label.place(relx=0.531, rely=0.229, height=56, width=212)
        self.Time_Label.configure(activebackground="#f9f9f9")
        self.Time_Label.configure(activeforeground="black")
        self.Time_Label.configure(background="#d9d9d9")
        self.Time_Label.configure(disabledforeground="#a3a3a3")
        self.Time_Label.configure(font="-family {Times New Roman} -size 13")
        self.Time_Label.configure(foreground="#000000")
        self.Time_Label.configure(highlightbackground="#d9d9d9")
        self.Time_Label.configure(highlightcolor="black")
        self.Time_Label.configure(text='''Time:''')

        self.Datenow_Label = tk.Label(self.First_Window_Frame)
        self.Datenow_Label.place(relx=0.345, rely=0.229, height=56, width=212)
        self.Datenow_Label.configure(activebackground="#f9f9f9")
        self.Datenow_Label.configure(activeforeground="black")
        self.Datenow_Label.configure(background="#d9d9d9")
        self.Datenow_Label.configure(disabledforeground="#a3a3a3")
        self.Datenow_Label.configure(font="-family {Times New Roman} -size 13")
        self.Datenow_Label.configure(foreground="#000000")
        self.Datenow_Label.configure(highlightbackground="#d9d9d9")
        self.Datenow_Label.configure(highlightcolor="black")
        self.Datenow_Label.configure(text=date.today())

        self.Timenow_Label = tk.Label(self.First_Window_Frame)
        self.Timenow_Label.place(relx=0.717, rely=0.229, height=56, width=234)
        self.Timenow_Label.configure(activebackground="#f9f9f9")
        self.Timenow_Label.configure(activeforeground="black")
        self.Timenow_Label.configure(background="#d9d9d9")
        self.Timenow_Label.configure(disabledforeground="#a3a3a3")
        self.Timenow_Label.configure(font="-family {Times New Roman} -size 13")
        self.Timenow_Label.configure(foreground="#000000")
        self.Timenow_Label.configure(highlightbackground="#d9d9d9")
        self.Timenow_Label.configure(highlightcolor="black")
        tick()

        self.Search_Button = tk.Button(self.First_Window_Frame)
        self.Search_Button.place(relx=0.133, rely=0.473, height=73, width=176)
        self.Search_Button.configure(activebackground="#ececec")
        self.Search_Button.configure(activeforeground="#000000")
        self.Search_Button.configure(background="#d9d9d9")
        self.Search_Button.configure(disabledforeground="#a3a3a3")
        self.Search_Button.configure(font="-family {Times New Roman} -size 14")
        self.Search_Button.configure(foreground="#000000")
        self.Search_Button.configure(highlightbackground="#d9d9d9")
        self.Search_Button.configure(highlightcolor="black")
        self.Search_Button.configure(pady="0")
        self.Search_Button.configure(command=self.search, text='''SEARCH''')

        self.Borrower_Button = tk.Button(self.First_Window_Frame)
        self.Borrower_Button.place(relx=0.452, rely=0.473, height=73, width=176)
        self.Borrower_Button.configure(activebackground="#ececec")
        self.Borrower_Button.configure(activeforeground="#000000")
        self.Borrower_Button.configure(background="#d9d9d9")
        self.Borrower_Button.configure(disabledforeground="#a3a3a3")
        self.Borrower_Button.configure(font="-family {Times New Roman} -size 14")
        self.Borrower_Button.configure(foreground="#000000")
        self.Borrower_Button.configure(highlightbackground="#d9d9d9")
        self.Borrower_Button.configure(highlightcolor="black")
        self.Borrower_Button.configure(pady="0")
        self.Borrower_Button.configure(command=self.show_Borrower,text='''BORROWER''')

        self.Supplier_Button = tk.Button(self.First_Window_Frame)
        self.Supplier_Button.place(relx=0.744, rely=0.473, height=73, width=176)
        self.Supplier_Button.configure(activebackground="#ececec")
        self.Supplier_Button.configure(activeforeground="#000000")
        self.Supplier_Button.configure(background="#d9d9d9")
        self.Supplier_Button.configure(disabledforeground="#a3a3a3")
        self.Supplier_Button.configure(font=font11)
        self.Supplier_Button.configure(foreground="#000000")
        self.Supplier_Button.configure(highlightbackground="#d9d9d9")
        self.Supplier_Button.configure(highlightcolor="black")
        self.Supplier_Button.configure(pady="0")
        self.Supplier_Button.configure(command=self.show_supplier, text='''SUPPLIER''')

        self.Member_Button = tk.Button(self.First_Window_Frame)
        self.Member_Button.place(relx=0.133, rely=0.65, height=73, width=176)
        self.Member_Button.configure(activebackground="#ececec")
        self.Member_Button.configure(activeforeground="#000000")
        self.Member_Button.configure(background="#d9d9d9")
        self.Member_Button.configure(disabledforeground="#a3a3a3")
        self.Member_Button.configure(font=font11)
        self.Member_Button.configure(foreground="#000000")
        self.Member_Button.configure(highlightbackground="#d9d9d9")
        self.Member_Button.configure(highlightcolor="black")
        self.Member_Button.configure(pady="0")
        self.Member_Button.configure(command=self.member, text='''MEMBERS''')

        self.Fine_Button = tk.Button(self.First_Window_Frame)
        self.Fine_Button.place(relx=0.452, rely=0.65, height=73, width=176)
        self.Fine_Button.configure(activebackground="#ececec")
        self.Fine_Button.configure(activeforeground="#000000")
        self.Fine_Button.configure(background="#d9d9d9")
        self.Fine_Button.configure(disabledforeground="#a3a3a3")
        self.Fine_Button.configure(font=font11)
        self.Fine_Button.configure(foreground="#000000")
        self.Fine_Button.configure(highlightbackground="#d9d9d9")
        self.Fine_Button.configure(highlightcolor="black")
        self.Fine_Button.configure(pady="0")
        self.Fine_Button.configure(command=self.show_fine,text='''FINE DETAILS''')

        self.Bookdetails_Button = tk.Button(self.First_Window_Frame)
        self.Bookdetails_Button.place(relx=0.744, rely=0.65, height=73, width=176)
        self.Bookdetails_Button.configure(activebackground="#ececec")
        self.Bookdetails_Button.configure(activeforeground="#000000")
        self.Bookdetails_Button.configure(background="#d9d9d9")
        self.Bookdetails_Button.configure(disabledforeground="#a3a3a3")
        self.Bookdetails_Button.configure(font=font11)
        self.Bookdetails_Button.configure(foreground="#000000")
        self.Bookdetails_Button.configure(highlightbackground="#d9d9d9")
        self.Bookdetails_Button.configure(highlightcolor="black")
        self.Bookdetails_Button.configure(pady="0")
        self.Bookdetails_Button.configure(command=self.display_all,text='''BOOK DETAILS''')

        self.menubar = tk.Menu(First_Window, font=font9, bg=_bgcolor, fg=_fgcolor)
        First_Window.configure(menu=self.menubar)

        self.File_Menu = tk.Menu(First_Window, tearoff=0)
        self.menubar.add_cascade(menu=self.File_Menu,
                                 activebackground="#ececec",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 compound="left",
                                 foreground="#000000",
                                 label="File")
        self.File_Menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            foreground="#000000",
            label="Exit",
            command=first_window_support.destroy_window)

        self.Edit_Menu = tk.Menu(First_Window,tearoff=0)
        self.menubar.add_cascade(menu=self.Edit_Menu,
                                 activebackground="#ececec",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 compound="left",
                                 foreground="#000000",
                                 label="Edit")

        self.Add_Menu = tk.Menu(First_Window,tearoff=0)
        self.Edit_Menu.add_cascade(menu=self.Add_Menu,
                                 activebackground="#ececec",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 compound="left",
                                 foreground="#000000",
                                 label="Add" )
        self.Add_Menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            foreground="#000000",
            label="Add Book",
            command=self.add_book)
        self.Add_Menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            foreground="#000000",
            label="Add Member",
            command =self.add_member)
        self.Add_Menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            foreground="#000000",
            label="Add Supplier",
            command=self.add_supplier)
        self.Add_Menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            foreground="#000000",
            label="Add Fine",
            command = self.add_fine)
        self.Add_Menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            foreground="#000000",
            label="Add Borrower",
            command=self.add_borrower)

        self.Delete_Menu = tk.Menu(First_Window, tearoff=0)
        self.Edit_Menu.add_cascade(menu=self.Delete_Menu,
                                   activebackground="#ececec",
                                   activeforeground="#000000",
                                   background="#d9d9d9",
                                   compound="left",
                                   foreground="#000000",
                                   label="Delete")
        self.Delete_Menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            foreground="#000000",
            label="Delete Book",
            command=self.delete_book)
        self.Delete_Menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            foreground="#000000",
            label="Delete Member",
            command=self.delete_member)
        self.Delete_Menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            foreground="#000000",
            label="Delete Supplier",
            command=self.delete_supplier)
        self.Delete_Menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            foreground="#000000",
            label="Delete Fine",
            command=self.delete_fine)
        self.Delete_Menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            foreground="#000000",
            label="Delete Borrower",
            command=self.delete_borrower)

        self.Display_Menu = tk.Menu(First_Window, tearoff=0)
        self.menubar.add_cascade(menu=self.Display_Menu,
                                 activebackground="#ececec",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 compound="left",
                                 foreground="#000000",
                                 label="Display")
        self.Display_Menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            foreground="#000000",
            label="Display Book",
            command=self.display_book)
        self.Display_Menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            foreground="#000000",
            label="Display Borrower",
            command=self.display_borrower)
        self.Display_Menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            foreground="#000000",
            label="Display Fine",
            command=self.display_fine)
        self.Display_Menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            foreground="#000000",
            label="Display Member",
            command=self.display_member)
        self.Display_Menu.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            foreground="#000000",
            label="Display Supplier",
            command=self.display_supplier)


        self.conn.commit()
        self.conn.close()


if __name__ == '__main__':
    vp_start_gui()
